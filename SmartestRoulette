//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Strings.sol";

contract randomizer{
    uint256 nonce;
    uint randomnumber;
    bool[6] chambered_rounds;
    uint current_round;
    string result;

    function reroll() public returns (string memory) {
        chambered_rounds[0] = false;
        chambered_rounds[1] = false;
        chambered_rounds[2] = false;
        chambered_rounds[3] = false;
        chambered_rounds[4] = false;
        chambered_rounds[5] = false;
        randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))) % 5;
        nonce++;
        current_round = 0;
        chambered_rounds[randomnumber] = true;
        return Strings.toString(randomnumber);
    }

    function read() view public returns (uint) {
        uint round;
        round = randomnumber + 1;
        return round;
    }

    function readrounds() view public returns (bool[6] memory) {
        return chambered_rounds;
    }

    function shoot() public {
        if (chambered_rounds[current_round] = true) {
            result = string("fail");
            reroll();
        }
        else {
            current_round++;
            result = string("success");
        }
    }

    function tofailornottofail() view public returns (string memory) {
        return result;
    }
}
